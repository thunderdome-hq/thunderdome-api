// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: thunderdome.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Thunderdome_GetStatus_FullMethodName     = "/thunderdome.Thunderdome/GetStatus"
	Thunderdome_JoinUser_FullMethodName      = "/thunderdome.Thunderdome/JoinUser"
	Thunderdome_LeaveUser_FullMethodName     = "/thunderdome.Thunderdome/LeaveUser"
	Thunderdome_AcceptUser_FullMethodName    = "/thunderdome.Thunderdome/AcceptUser"
	Thunderdome_VerifyUser_FullMethodName    = "/thunderdome.Thunderdome/VerifyUser"
	Thunderdome_ListTickets_FullMethodName   = "/thunderdome.Thunderdome/ListTickets"
	Thunderdome_ClaimTicket_FullMethodName   = "/thunderdome.Thunderdome/ClaimTicket"
	Thunderdome_DropTicket_FullMethodName    = "/thunderdome.Thunderdome/DropTicket"
	Thunderdome_GithubWebhook_FullMethodName = "/thunderdome.Thunderdome/GithubWebhook"
)

// ThunderdomeClient is the client API for Thunderdome service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThunderdomeClient interface {
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
	JoinUser(ctx context.Context, in *JoinUserRequest, opts ...grpc.CallOption) (*JoinUserResponse, error)
	LeaveUser(ctx context.Context, in *LeaveUserRequest, opts ...grpc.CallOption) (*LeaveUserResponse, error)
	AcceptUser(ctx context.Context, in *AcceptUserRequest, opts ...grpc.CallOption) (*AcceptUserResponse, error)
	VerifyUser(ctx context.Context, in *VerifyUserRequest, opts ...grpc.CallOption) (*VerifyUserResponse, error)
	ListTickets(ctx context.Context, in *ListTicketsRequest, opts ...grpc.CallOption) (*ListTicketsResponse, error)
	ClaimTicket(ctx context.Context, in *ClaimTicketRequest, opts ...grpc.CallOption) (*ClaimTicketResponse, error)
	DropTicket(ctx context.Context, in *DropTicketRequest, opts ...grpc.CallOption) (*DropTicketResponse, error)
	GithubWebhook(ctx context.Context, in *GithubWebhookRequest, opts ...grpc.CallOption) (*GithubWebhookResponse, error)
}

type thunderdomeClient struct {
	cc grpc.ClientConnInterface
}

func NewThunderdomeClient(cc grpc.ClientConnInterface) ThunderdomeClient {
	return &thunderdomeClient{cc}
}

func (c *thunderdomeClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, Thunderdome_GetStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thunderdomeClient) JoinUser(ctx context.Context, in *JoinUserRequest, opts ...grpc.CallOption) (*JoinUserResponse, error) {
	out := new(JoinUserResponse)
	err := c.cc.Invoke(ctx, Thunderdome_JoinUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thunderdomeClient) LeaveUser(ctx context.Context, in *LeaveUserRequest, opts ...grpc.CallOption) (*LeaveUserResponse, error) {
	out := new(LeaveUserResponse)
	err := c.cc.Invoke(ctx, Thunderdome_LeaveUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thunderdomeClient) AcceptUser(ctx context.Context, in *AcceptUserRequest, opts ...grpc.CallOption) (*AcceptUserResponse, error) {
	out := new(AcceptUserResponse)
	err := c.cc.Invoke(ctx, Thunderdome_AcceptUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thunderdomeClient) VerifyUser(ctx context.Context, in *VerifyUserRequest, opts ...grpc.CallOption) (*VerifyUserResponse, error) {
	out := new(VerifyUserResponse)
	err := c.cc.Invoke(ctx, Thunderdome_VerifyUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thunderdomeClient) ListTickets(ctx context.Context, in *ListTicketsRequest, opts ...grpc.CallOption) (*ListTicketsResponse, error) {
	out := new(ListTicketsResponse)
	err := c.cc.Invoke(ctx, Thunderdome_ListTickets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thunderdomeClient) ClaimTicket(ctx context.Context, in *ClaimTicketRequest, opts ...grpc.CallOption) (*ClaimTicketResponse, error) {
	out := new(ClaimTicketResponse)
	err := c.cc.Invoke(ctx, Thunderdome_ClaimTicket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thunderdomeClient) DropTicket(ctx context.Context, in *DropTicketRequest, opts ...grpc.CallOption) (*DropTicketResponse, error) {
	out := new(DropTicketResponse)
	err := c.cc.Invoke(ctx, Thunderdome_DropTicket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thunderdomeClient) GithubWebhook(ctx context.Context, in *GithubWebhookRequest, opts ...grpc.CallOption) (*GithubWebhookResponse, error) {
	out := new(GithubWebhookResponse)
	err := c.cc.Invoke(ctx, Thunderdome_GithubWebhook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThunderdomeServer is the server API for Thunderdome service.
// All implementations must embed UnimplementedThunderdomeServer
// for forward compatibility
type ThunderdomeServer interface {
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
	JoinUser(context.Context, *JoinUserRequest) (*JoinUserResponse, error)
	LeaveUser(context.Context, *LeaveUserRequest) (*LeaveUserResponse, error)
	AcceptUser(context.Context, *AcceptUserRequest) (*AcceptUserResponse, error)
	VerifyUser(context.Context, *VerifyUserRequest) (*VerifyUserResponse, error)
	ListTickets(context.Context, *ListTicketsRequest) (*ListTicketsResponse, error)
	ClaimTicket(context.Context, *ClaimTicketRequest) (*ClaimTicketResponse, error)
	DropTicket(context.Context, *DropTicketRequest) (*DropTicketResponse, error)
	GithubWebhook(context.Context, *GithubWebhookRequest) (*GithubWebhookResponse, error)
	mustEmbedUnimplementedThunderdomeServer()
}

// UnimplementedThunderdomeServer must be embedded to have forward compatible implementations.
type UnimplementedThunderdomeServer struct {
}

func (UnimplementedThunderdomeServer) GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedThunderdomeServer) JoinUser(context.Context, *JoinUserRequest) (*JoinUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinUser not implemented")
}
func (UnimplementedThunderdomeServer) LeaveUser(context.Context, *LeaveUserRequest) (*LeaveUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveUser not implemented")
}
func (UnimplementedThunderdomeServer) AcceptUser(context.Context, *AcceptUserRequest) (*AcceptUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptUser not implemented")
}
func (UnimplementedThunderdomeServer) VerifyUser(context.Context, *VerifyUserRequest) (*VerifyUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyUser not implemented")
}
func (UnimplementedThunderdomeServer) ListTickets(context.Context, *ListTicketsRequest) (*ListTicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTickets not implemented")
}
func (UnimplementedThunderdomeServer) ClaimTicket(context.Context, *ClaimTicketRequest) (*ClaimTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimTicket not implemented")
}
func (UnimplementedThunderdomeServer) DropTicket(context.Context, *DropTicketRequest) (*DropTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropTicket not implemented")
}
func (UnimplementedThunderdomeServer) GithubWebhook(context.Context, *GithubWebhookRequest) (*GithubWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GithubWebhook not implemented")
}
func (UnimplementedThunderdomeServer) mustEmbedUnimplementedThunderdomeServer() {}

// UnsafeThunderdomeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThunderdomeServer will
// result in compilation errors.
type UnsafeThunderdomeServer interface {
	mustEmbedUnimplementedThunderdomeServer()
}

func RegisterThunderdomeServer(s grpc.ServiceRegistrar, srv ThunderdomeServer) {
	s.RegisterService(&Thunderdome_ServiceDesc, srv)
}

func _Thunderdome_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThunderdomeServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Thunderdome_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThunderdomeServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thunderdome_JoinUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThunderdomeServer).JoinUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Thunderdome_JoinUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThunderdomeServer).JoinUser(ctx, req.(*JoinUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thunderdome_LeaveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThunderdomeServer).LeaveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Thunderdome_LeaveUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThunderdomeServer).LeaveUser(ctx, req.(*LeaveUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thunderdome_AcceptUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThunderdomeServer).AcceptUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Thunderdome_AcceptUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThunderdomeServer).AcceptUser(ctx, req.(*AcceptUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thunderdome_VerifyUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThunderdomeServer).VerifyUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Thunderdome_VerifyUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThunderdomeServer).VerifyUser(ctx, req.(*VerifyUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thunderdome_ListTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThunderdomeServer).ListTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Thunderdome_ListTickets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThunderdomeServer).ListTickets(ctx, req.(*ListTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thunderdome_ClaimTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThunderdomeServer).ClaimTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Thunderdome_ClaimTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThunderdomeServer).ClaimTicket(ctx, req.(*ClaimTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thunderdome_DropTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThunderdomeServer).DropTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Thunderdome_DropTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThunderdomeServer).DropTicket(ctx, req.(*DropTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thunderdome_GithubWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GithubWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThunderdomeServer).GithubWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Thunderdome_GithubWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThunderdomeServer).GithubWebhook(ctx, req.(*GithubWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Thunderdome_ServiceDesc is the grpc.ServiceDesc for Thunderdome service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Thunderdome_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thunderdome.Thunderdome",
	HandlerType: (*ThunderdomeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _Thunderdome_GetStatus_Handler,
		},
		{
			MethodName: "JoinUser",
			Handler:    _Thunderdome_JoinUser_Handler,
		},
		{
			MethodName: "LeaveUser",
			Handler:    _Thunderdome_LeaveUser_Handler,
		},
		{
			MethodName: "AcceptUser",
			Handler:    _Thunderdome_AcceptUser_Handler,
		},
		{
			MethodName: "VerifyUser",
			Handler:    _Thunderdome_VerifyUser_Handler,
		},
		{
			MethodName: "ListTickets",
			Handler:    _Thunderdome_ListTickets_Handler,
		},
		{
			MethodName: "ClaimTicket",
			Handler:    _Thunderdome_ClaimTicket_Handler,
		},
		{
			MethodName: "DropTicket",
			Handler:    _Thunderdome_DropTicket_Handler,
		},
		{
			MethodName: "GithubWebhook",
			Handler:    _Thunderdome_GithubWebhook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "thunderdome.proto",
}
